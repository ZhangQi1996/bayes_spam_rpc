/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zq.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-27")
public class RpcResult implements org.apache.thrift.TBase<RpcResult, RpcResult._Fields>, java.io.Serializable, Cloneable, Comparable<RpcResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcResult");

  private static final org.apache.thrift.protocol.TField STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("status_code", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField CLAZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("clazz", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcResultTupleSchemeFactory();

  public short status_code; // optional
  public short clazz; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS_CODE((short)1, "status_code"),
    CLAZZ((short)2, "clazz");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_CODE
          return STATUS_CODE;
        case 2: // CLAZZ
          return CLAZZ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_CODE_ISSET_ID = 0;
  private static final int __CLAZZ_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS_CODE,_Fields.CLAZZ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("status_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "short")));
    tmpMap.put(_Fields.CLAZZ, new org.apache.thrift.meta_data.FieldMetaData("clazz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "short")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcResult.class, metaDataMap);
  }

  public RpcResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcResult(RpcResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status_code = other.status_code;
    this.clazz = other.clazz;
  }

  public RpcResult deepCopy() {
    return new RpcResult(this);
  }

  @Override
  public void clear() {
    setStatus_codeIsSet(false);
    this.status_code = 0;
    setClazzIsSet(false);
    this.clazz = 0;
  }

  public short getStatus_code() {
    return this.status_code;
  }

  public RpcResult setStatus_code(short status_code) {
    this.status_code = status_code;
    setStatus_codeIsSet(true);
    return this;
  }

  public void unsetStatus_code() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_CODE_ISSET_ID);
  }

  /** Returns true if field status_code is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus_code() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_CODE_ISSET_ID);
  }

  public void setStatus_codeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_CODE_ISSET_ID, value);
  }

  public short getClazz() {
    return this.clazz;
  }

  public RpcResult setClazz(short clazz) {
    this.clazz = clazz;
    setClazzIsSet(true);
    return this;
  }

  public void unsetClazz() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLAZZ_ISSET_ID);
  }

  /** Returns true if field clazz is set (has been assigned a value) and false otherwise */
  public boolean isSetClazz() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLAZZ_ISSET_ID);
  }

  public void setClazzIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLAZZ_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case STATUS_CODE:
      if (value == null) {
        unsetStatus_code();
      } else {
        setStatus_code((Short)value);
      }
      break;

    case CLAZZ:
      if (value == null) {
        unsetClazz();
      } else {
        setClazz((Short)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_CODE:
      return getStatus_code();

    case CLAZZ:
      return getClazz();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS_CODE:
      return isSetStatus_code();
    case CLAZZ:
      return isSetClazz();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcResult)
      return this.equals((RpcResult)that);
    return false;
  }

  public boolean equals(RpcResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status_code = true && this.isSetStatus_code();
    boolean that_present_status_code = true && that.isSetStatus_code();
    if (this_present_status_code || that_present_status_code) {
      if (!(this_present_status_code && that_present_status_code))
        return false;
      if (this.status_code != that.status_code)
        return false;
    }

    boolean this_present_clazz = true && this.isSetClazz();
    boolean that_present_clazz = true && that.isSetClazz();
    if (this_present_clazz || that_present_clazz) {
      if (!(this_present_clazz && that_present_clazz))
        return false;
      if (this.clazz != that.clazz)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus_code()) ? 131071 : 524287);
    if (isSetStatus_code())
      hashCode = hashCode * 8191 + status_code;

    hashCode = hashCode * 8191 + ((isSetClazz()) ? 131071 : 524287);
    if (isSetClazz())
      hashCode = hashCode * 8191 + clazz;

    return hashCode;
  }

  @Override
  public int compareTo(RpcResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus_code()).compareTo(other.isSetStatus_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status_code, other.status_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClazz()).compareTo(other.isSetClazz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClazz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clazz, other.clazz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RpcResult(");
    boolean first = true;

    if (isSetStatus_code()) {
      sb.append("status_code:");
      sb.append(this.status_code);
      first = false;
    }
    if (isSetClazz()) {
      if (!first) sb.append(", ");
      sb.append("clazz:");
      sb.append(this.clazz);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcResultStandardScheme getScheme() {
      return new RpcResultStandardScheme();
    }
  }

  private static class RpcResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.status_code = iprot.readI16();
              struct.setStatus_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLAZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.clazz = iprot.readI16();
              struct.setClazzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetStatus_code()) {
        oprot.writeFieldBegin(STATUS_CODE_FIELD_DESC);
        oprot.writeI16(struct.status_code);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClazz()) {
        oprot.writeFieldBegin(CLAZZ_FIELD_DESC);
        oprot.writeI16(struct.clazz);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcResultTupleScheme getScheme() {
      return new RpcResultTupleScheme();
    }
  }

  private static class RpcResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus_code()) {
        optionals.set(0);
      }
      if (struct.isSetClazz()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStatus_code()) {
        oprot.writeI16(struct.status_code);
      }
      if (struct.isSetClazz()) {
        oprot.writeI16(struct.clazz);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.status_code = iprot.readI16();
        struct.setStatus_codeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clazz = iprot.readI16();
        struct.setClazzIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

